javascript
Copy code
// Check if the response indicates an expired token
if (pm.response.code === 401 && pm.response.json().message === 'Token expired') {
    const url = 'https://example.com/api/token';
    const clientId = 'YOUR_CLIENT_ID';
    const clientSecret = 'YOUR_CLIENT_SECRET';

    // Request a new token
    pm.sendRequest({
        url: url,
        method: 'POST',
        header: 'Content-Type:application/x-www-form-urlencoded',
        body: {
            mode: 'urlencoded',
            urlencoded: [
                {key: "grant_type", value: "client_credentials"},
                {key: "client_id", value: clientId},
                {key: "client_secret", value: clientSecret}
            ]
        }
    }, function (err, res) {
        if (err) {
            console.log('Token generation failed:', err);
        } else {
            const jsonResponse = res.json();
            pm.environment.set('access_token', jsonResponse.access_token);
            // Optionally recalculate and store the token's expiration time
            let expiryDate = new Date();
            expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);
            pm.environment.set('token_expiry', expiryDate.toString());

            // Optionally, you can rerun the request that failed due to token expiration
            pm.sendRequest(pm.request, function (err, res) {
                // Handle the response from the retried request
            });
        }
    });
}


pm.sendRequest({
    url: 'https://api.yourservice.com/endpoint', // Replace with the actual endpoint
    method: 'GET', // or 'POST', 'PUT', etc., depending on the operation
    header: {
        'Authorization': 'Bearer ' + pm.environment.get('access_token'), // Retrieving the access token from environment variables
        'Content-Type': 'application/json' // Assuming JSON data format; change as needed
    },
    body: {
        mode: 'raw',
        raw: JSON.stringify({
            // Your JSON body here
        })
    }
}, function (err, res) {
    // Callback function to handle the response
    if (err) {
        console.log('Request failed:', err);
    } else {
        console.log('Response:', res);
    }
});

for pre:
// Check if the current token is still valid or if it needs refresh
if (!pm.environment.get('token_expiry') || new Date() > new Date(pm.environment.get('token_expiry'))) {
    const url = 'https://example.com/api/token';
    const clientId = 'YOUR_CLIENT_ID';
    const clientSecret = 'YOUR_CLIENT_SECRET';

    // Asynchronously request a new token
    pm.sendRequest({
        url: url,
        method: 'POST',
        header: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: {
            mode: 'urlencoded',
            urlencoded: [
                {key: "grant_type", value: "client_credentials"},
                {key: "client_id", value: clientId},
                {key: "client_secret", value: clientSecret}
            ]
        }
    }, function (err, res) {
        if (err) {
            console.log('Token generation failed:', err);
        } else {
            const jsonResponse = res.json();
            pm.environment.set('access_token', jsonResponse.access_token);
            let expiryDate = new Date();
            expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);
            pm.environment.set('token_expiry', expiryDate.toString());
        }
    });
}

// Always attach the valid token to the request
pm.request.headers.add({
    key: 'Authorization',
    value: 'Bearer ' + pm.environment.get('access_token')
});

Request:
 
Coming into this!
 
POST https://otiagateway-dev.internal.cvshealth.com/data-extraction-function-high-v3/dataextractionupload?clientName=cvs-rxregaudit&convertPdftoImage=true&customVisionProjectName=all
401
78 ms
Network
Request Headers
Authorization: Bearer undefined
Content-Type: application/x-www-form-urlencoded
User-Agent: PostmanRuntime/7.39.0
Accept: */*
Postman-Token: db69bb05-e1cb-417d-aaa4-639efda3132f
Host: otiagateway-dev.internal.cvshealth.com
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Content-Length: 131
Request Body
Response Headers
Content-Length: 152
Content-Type: application/json
Request-Context: appId=cid-v1:d5cfc48c-062d-4341-aca1-992a2c2d50b8
WWW-Authenticate: AzureApiManagementKey realm="https://otiagateway-dev.internal.cvshealth.com/data-extraction-function-high-v3",name="Ocp-Apim-Subscription-Key",type="header"
Date: Thu, 30 May 2024 21:32:55 GMT
Response Body
 
POST https://otiagateway-dev.internal.cvshealth.com/data-extraction-function-high-v3/dataextractionupload?clientName=cvs-rxregaudit&convertPdftoImage=true&customVisionProjectName=all
401
82 ms
Network
Request Headers
Ocp-Apim-Subscription-Key: fa557d1ef73640c288850dfe84ce8ff3
Authorization: Bearer undefined
User-Agent: PostmanRuntime/7.39.0
Accept: */*
Postman-Token: a9e2057e-5992-401f-b59e-eee33864ef05
Host: otiagateway-dev.internal.cvshealth.com
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Content-Type: multipart/form-data; boundary=--------------------------956899008717445661689182
Content-Length: 34393
Request Body
Response Headers
Content-Length: 48
Content-Type: application/json
Request-Context: appId=cid-v1:d5cfc48c-062d-4341-aca1-992a2c2d50b8
Date: Thu, 30 May 2024 21:32:55 GMT
Response Body
{ "statusCode": 401, "message": "Invalid JWT." }
