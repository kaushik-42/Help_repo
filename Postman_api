javascript
Copy code
// Check if the response indicates an expired token
if (pm.response.code === 401 && pm.response.json().message === 'Token expired') {
    const url = 'https://example.com/api/token';
    const clientId = 'YOUR_CLIENT_ID';
    const clientSecret = 'YOUR_CLIENT_SECRET';

    // Request a new token
    pm.sendRequest({
        url: url,
        method: 'POST',
        header: 'Content-Type:application/x-www-form-urlencoded',
        body: {
            mode: 'urlencoded',
            urlencoded: [
                {key: "grant_type", value: "client_credentials"},
                {key: "client_id", value: clientId},
                {key: "client_secret", value: clientSecret}
            ]
        }
    }, function (err, res) {
        if (err) {
            console.log('Token generation failed:', err);
        } else {
            const jsonResponse = res.json();
            pm.environment.set('access_token', jsonResponse.access_token);
            // Optionally recalculate and store the token's expiration time
            let expiryDate = new Date();
            expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);
            pm.environment.set('token_expiry', expiryDate.toString());

            // Optionally, you can rerun the request that failed due to token expiration
            pm.sendRequest(pm.request, function (err, res) {
                // Handle the response from the retried request
            });
        }
    });
}


pm.sendRequest({
    url: 'https://api.yourservice.com/endpoint', // Replace with the actual endpoint
    method: 'GET', // or 'POST', 'PUT', etc., depending on the operation
    header: {
        'Authorization': 'Bearer ' + pm.environment.get('access_token'), // Retrieving the access token from environment variables
        'Content-Type': 'application/json' // Assuming JSON data format; change as needed
    },
    body: {
        mode: 'raw',
        raw: JSON.stringify({
            // Your JSON body here
        })
    }
}, function (err, res) {
    // Callback function to handle the response
    if (err) {
        console.log('Request failed:', err);
    } else {
        console.log('Response:', res);
    }
});

for pre:
// Check if the current token is still valid or if it needs refresh
if (!pm.environment.get('token_expiry') || new Date() > new Date(pm.environment.get('token_expiry'))) {
    const url = 'https://example.com/api/token';
    const clientId = 'YOUR_CLIENT_ID';
    const clientSecret = 'YOUR_CLIENT_SECRET';

    // Asynchronously request a new token
    pm.sendRequest({
        url: url,
        method: 'POST',
        header: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: {
            mode: 'urlencoded',
            urlencoded: [
                {key: "grant_type", value: "client_credentials"},
                {key: "client_id", value: clientId},
                {key: "client_secret", value: clientSecret}
            ]
        }
    }, function (err, res) {
        if (err) {
            console.log('Token generation failed:', err);
        } else {
            const jsonResponse = res.json();
            pm.environment.set('access_token', jsonResponse.access_token);
            let expiryDate = new Date();
            expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);
            pm.environment.set('token_expiry', expiryDate.toString());
        }
    });
}

// Always attach the valid token to the request
pm.request.headers.add({
    key: 'Authorization',
    value: 'Bearer ' + pm.environment.get('access_token')
});

Request:
 
Coming into this!
 
Token is not defined. Please check the token generation script
 
GET https://login.microsoftonline.com/fabb61b8-3afe-4e75-b934-a47f782b8cd7/oauth2/v2.0/token
400
96 ms
Network
Request Headers
Authorization: Bearer undefined
Content-Type: application/x-www-form-urlencoded
User-Agent: PostmanRuntime/7.39.0
Accept: */*
Postman-Token: d76c1862-8fee-4d1b-9674-9a26a6033c71
Host: login.microsoftonline.com
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Content-Length: 131
Cookie: fpc=Apu-UncsCf9Fqg9GvrOdzWhk52fsBAAAAH3p6t0OAAAA; stsservicecookie=estsfd; x-ms-gateway-slice=estsfd
Request Body
Response Headers
Cache-Control: no-store, no-cache
Pragma: no-cache
Content-Type: application/json; charset=utf-8
Expires: -1
Strict-Transport-Security: max-age=31536000; includeSubDomains
X-Content-Type-Options: nosniff
P3P: CP="DSP CUR OTPi IND OTRi ONL FIN"
x-ms-request-id: 864da235-9dde-4d19-99c3-5f7066511901
x-ms-ests-server: 2.1.18105.6 - SCUS ProdSlices
x-ms-srs: 1.P
X-XSS-Protection: 0
Set-Cookie: fpc=Apu-UncsCf9Fqg9GvrOdzWhk52fsBAAAAH3p6t0OAAAA; expires=Sat, 29-Jun-2024 21:46:42 GMT; path=/; secure; HttpOnly; SameSite=None
Set-Cookie: x-ms-gateway-slice=estsfd; path=/; secure; samesite=none; httponly
Date: Thu, 30 May 2024 21:46:42 GMT
Content-Length: 554
Response Body
{"error":"invalid_request","error_description":"AADSTS90014: The required field 'scope' is missing from the credential. Ensure that you have all the necessary parameters for the login request. Trace ID: 864da235-9dde-4d19-99c3-5f7066511901 Correlation ID: e2c84a75-daca-4d28-8cd8-779628019f50 Timestamp: 2024-05-30 21:46:42Z","error_codes":[90014],"timestamp":"2024-05-30 21:46:42Z","trace_id":"864da235-9dde-4d19-99c3-5f7066511901","correlation_id":"e2c84a75-daca-4d28-8cd8-779628019f50","error_uri":"https://login.microsoftonline.com/error?code=90014"}
